properties([parameters([string(description: 'Recipe reference that has changed', name: 'name_version', defaultValue: 'LIB_A/1.0'),
                        string(description: 'User/Channel', name: 'user_channel', defaultValue: 'jfrog/stable'),
                        string(description: 'Config repository URL', name: 'conf_repo_url', defaultValue: 'https://github.com/xingao0803/demo-multi-builds.git'),
                        string(description: 'Config repository branch', name: 'conf_repo_branch', defaultValue: 'master'),
                        ])])
                        
import groovy.transform.Field

// Artifactory server instance, defined in Jenkins --> Manage:
@Field def artifactory_server = 'demo-arti'

// Conan repository in Artifactory server
@Field def artifactory_repo = 'demo-conan-local'

// User/Pass for Artifactory server
@Field def user_name = 'admin'
@Field def user_apikey = 'APBG9f7okturGUX3EH6LhxhbBmR'

def get_build_order_for_leave(ref, leave_name, profiles, repo_branch, repo_url, recipe_dir, client, conf_repo_dir, serverName) {
    def profiles_bo = [:]
    dir(leave_name + "_repo"){
        echo "Getting leave recipe '${leave_name}' ${repo_branch} ${repo_url}"
        git branch: repo_branch, url: repo_url
        dir(recipe_dir){
            for(profile in profiles){
                profiles_bo[profile] = []
                client.run(command: "info . -r " + serverName + " -bo " + ref + " --json bo.json --profile \"" + conf_repo_dir + "/" + profile+ "\"")
                def bo_json = readJSON file: "./bo.json"
                profiles_bo[profile].addAll(bo_json["groups"])
                echo "Build order for recipe '${ref}' is " + bo_json
            }
        }
    }
    return profiles_bo
}

def get_tasks_groups(profiles_bo){
    // Merge all the profiles groups to run in parallel, first group from profile1 with first group from profile2, second
    // with second and so on
    def tasks_groups = []
    def group_index = 0
    while(true){
        tasks = []
        profiles_bo = entries(profiles_bo)
        for (int i = 0; i < profiles_bo.size(); i++) {
            def profile = profiles_bo[i]
            if(profile[1].size() <= group_index){
                continue;
            }
            for(ref in profile[1][group_index]){
                string name_p = ref.split("@")[0]
                string user = ref.split("@")[1].split("/")[0]
                string channel = ref.split("@")[1].split("/")[1]
                string task_name = ref + "_" + profile[0]
                string prof_name = profile[0].split("/").last()
                tasks.add([build_label: ref + " (${prof_name})",
                           ref: ref,
                           name_version: name_p,
                           user: user,
                           channel: channel,
                           profile: profile[0]])
            }
        }
        if(tasks.size() == 0){
           break
        }
        tasks_groups.add(tasks)
        group_index += 1
    }
    return tasks_groups
}


def launch_task_group(tasks_groups, conf_repo_url, conf_repo_branch){
    // Runs the tasks parallelizing
    for(int i=0; i<tasks_groups.size(); i++){
        tasks = [:]
        for(int j=0; j<tasks_groups[i].size(); j++){
            def a_build = tasks_groups[i][j]
            def label = a_build["build_label"]
            echo "BUILD: ${a_build}"
            tasks[label] = { -> build(job: "4.3Conan_Single_Build",
                              parameters: [
                                 string(name: "artifactory_name", value: artifactory_server),
                                 string(name: "artifactory_repo", value: artifactory_repo),
                                 string(name: "artifactory_user", value: user_name),
                                 string(name: "artifactory_apikey", value: user_apikey),
                                 string(name: "build_label", value: label),
                                 string(name: "username", value: a_build["user"]),
                                 string(name: "channel", value: a_build["channel"]),
                                 string(name: "name_version", value: a_build["name_version"]),
                                 string(name: "profile", value: a_build["profile"],
                                 string(name: "conf_repo_url", value: conf_repo_url),
                                 string(name: "conf_repo_branch", value: conf_repo_branch),
                                 )
                              ]
                       )
            }
        }
        parallel(tasks)
    }
}

@NonCPS def entries(m) {m.collect {k, v -> [k, v]}}


node {
    withEnv(['PATH+JENKINSHOME=/usr/local/bin']) {
        currentBuild.displayName = "Rebuild of " + params.name_version
        def data
        def conf_repo_dir
        def client
        def serverName
        
        stage("Configure/Get repositories"){
            dir("_conf_repo"){
                git branch: params.conf_repo_branch, url: params.conf_repo_url
                data = readYaml file: "conan_ci_conf.yml"
                conf_repo_dir = pwd()
            }
 
            // Obtain an Artifactory server instance: 
            def server = Artifactory.server artifactory_server

            // Create a conan client instance:
            client = Artifactory.newConanClient()
 
            // Add a new repository to the conan client.
            // The 'remote.add' method returns a 'serverName' string, which is used later in the script:
            serverName = client.remote.add server: server, repo: artifactory_repo
 
            // Login the new conan remote server
            def command = "user -r ${serverName} -p ${user_apikey} ${user_name}"
            client.run(command: command.toString())
        }

        stage("Fire deps"){
            def ref = params.name_version + "@" + params.user_channel
            def user = params.user_channel.split("/")[0]
            def channel = params.user_channel.split("/")[1]
            def leaves = entries(data.leaves)
            withEnv(["CONAN_USERNAME=${user}", "CONAN_CHANNEL=${channel}"]){
                for (int i = 0; i < leaves.size(); i++) {
                    def leave = leaves.get(i)
                    def leave_name = leave[0];
                    def profiles = leave[1]["profiles"];
                    def repo = data.repos.get(leave_name)
                    profiles_bo = get_build_order_for_leave(ref, leave_name, profiles, repo.branch,
                                                        repo.url, repo.dir, client,
                                                        conf_repo_dir, serverName)
                    def tasks_groups = get_tasks_groups(profiles_bo)
                    echo "Running in parallel: ${tasks_groups}"
                    launch_task_group(tasks_groups, params.conf_repo_url, params.conf_repo_branch)
                }
            }
        }
    }
}
